There are a lot of entities that we work within Chef, some playing on the cooking theme, and others using technology focused jargon, but the fundamental unit of configuration that we use is a cookbook. In this lesson, we’ll investigate what goes into a cookbook and we’ll create our first one.

Documentation:
Chef cookbook documentation (https://docs.chef.io/cookbooks.html)
Berkshelf documentation (https://docs.chef.io/berkshelf.html)
delivery documentation (https://docs.chef.io/delivery_cli.html)
kitchen documentation (https://docs.chef.io/kitchen.html)

What is a cookbook?
A cookbook is a collection of smaller building blocks that make up a useful, shareable piece of configuration. In the words of the official Chef documentation:

A cookbook defines a scenario and contains everything that is required to support that scenario.

We’re going to learn about all of the smaller pieces that we’ll need to support a scenario as we continue through the course, but the first thing that we need is a cookbook to contain them.

Generating a Cookbook:-
The Chef Development Kit includes a generate command that we’ve already seen can be used to create a chef-repo, but it can also be used to create the other types of structures that we’ll need to fully utilize Chef. That list includes cookbooks. Let’s use chef generate to create a cookbook that will handle the scenario of installing and configuring NGINX. All of our cookbooks are going to go in the cookbooks directory within our Chef repo and we’ll call this one bcf_nginx (For “Basic Chef Fluency”):

[workstation] ~/chef-repo $ chef --help
[workstation] ~/chef-repo $ chef generate --help
[workstation] ~/chef-repo $ chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type `cd cookbooks/bcf_nginx` to enter it.


There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb


Taking a look at this output we see some information about delivery, writing tests, and a default recipe. These are all topics that we’re going to cover as we continue on, but for right now we’re just going to worry about the structure of the cookbook that was generated. Let’s install the tree utility to our workstation and use it to get a high-level overview of what we’re working with:

[workstation chef-repo] $ sudo yum install -y tree
...
[workstation chef-repo] $ tree cookbooks/bcf_nginx/
cookbooks/bcf_nginx/
??? Berksfile
??? chefignore
??? .delivery
?   ??? build_cookbook
?   ?   ??? Berksfile
?   ?   ??? chefignore
?   ?   ??? data_bags
?   ?   ?   ??? keys
?   ?   ?       ??? delivery_builder_keys.json
?   ?   ??? .kitchen.yml
?   ?   ??? LICENSE
?   ?   ??? metadata.rb
?   ?   ??? README.md
?   ?   ??? recipes
?   ?   ?   ??? default.rb
?   ?   ?   ??? deploy.rb
?   ?   ?   ??? functional.rb
?   ?   ?   ??? lint.rb
?   ?   ?   ??? provision.rb
?   ?   ?   ??? publish.rb
?   ?   ?   ??? quality.rb
?   ?   ?   ??? security.rb
?   ?   ?   ??? smoke.rb
?   ?   ?   ??? syntax.rb
?   ?   ?   ??? unit.rb
?   ?   ??? secrets
?   ?   ?   ??? fakey-mcfakerton
?   ?   ??? test
?   ?       ??? fixtures
?   ?           ??? cookbooks
?   ?               ??? test
?   ?                   ??? metadata.rb
?   ?                   ??? recipes
?   ?                       ??? default.rb
?   ??? config.json
?   ??? project.toml
??? .kitchen.yml
??? LICENSE
??? metadata.rb
??? README.md
??? recipes
?   ??? default.rb
??? spec
?   ??? spec_helper.rb
?   ??? unit
?       ??? recipes
?           ??? default_spec.rb
??? test
    ??? integration
        ??? default
            ??? default_test.rb


Going through this list, here’s an overview of what each file is used for:

Berksfile - Configuration file used by Berkshelf, which is the package manager for Chef. This allows us to define cookbook dependencies.
chefignore - Specifies the files (can use patterns) that knife should ignore when uploading contents to the Chef Server.
.delivery - Directory holding configuration related to using delivery when working with Chef Automate.
.kitchen.yml - Configuration for kitchen to use for running integration tests.
LICENSE - The license that this cookbooks code should use.
metadata.rb - Includes information describing the cookbook itself. Information including compatible Chef versions, cookbook version number, name, email of maintainer, cookbook dependencies (Berkshelf uses this file also), and more.
README.md - Documentation for the cookbook as a whole that usually includes usage information.
recipes - Contains the cookbook recipes. Recipes are where the configuration happens in a cookbook.
spec - Directory that “unit” tests will go in. These tests don’t require an entire server to be spun up to test them.
test - Directory that higher level tests like “integration” tests will go in. These tests execute checks on a configured node.


In the next few lessons, we’ll look at more and more of the building blocks that we’ll use when working with Chef.
======================================================================================================================================================================
root@ip-172-31-6-143:/home/ubuntu/chef-repo# chef --help
Usage:
    chef -h/--help
    chef -v/--version
    chef command [arguments...] [options...]


Available Commands:
    exec                    Runs the command in context of the embedded ruby
    env                     Prints environment variables used by ChefDK
    gem                     Runs the `gem` command in context of the embedded Ruby
    generate                Generate a new repository, cookbook, or other component
    shell-init              Initialize your shell to use ChefDK as your primary Ruby
    install                 Install cookbooks from a Policyfile and generate a locked cookbook set
    update                  Updates a Policyfile.lock.json with latest run_list and cookbooks
    push                    Push a local policy lock to a policy group on the Chef Infra Server
    push-archive            Push a policy archive to a policy group on the Chef Infra Server
    show-policy             Show policyfile objects on the Chef Infra Server
    diff                    Generate an itemized diff of two Policyfile lock documents
    export                  Export a policy lock as a Chef Infra Zero code repo
    clean-policy-revisions  Delete unused policy revisions on the Chef Infra Server
    clean-policy-cookbooks  Delete unused policyfile cookbooks on the Chef Infra Server
    delete-policy-group     Delete a policy group on the Chef Infra Server
    delete-policy           Delete all revisions of a policy on the Chef Infra Server
    undelete                Undo a delete command
    describe-cookbook       Prints cookbook checksum information used for cookbook identifier
root@ip-172-31-6-143:/home/ubuntu/chef-repo# chef generate --help
Usage: chef generate GENERATOR [options]

Available generators:
  cookbook        Generate a single cookbook
  recipe          Generate a new recipe
  attribute       Generate an attributes file
  template        Generate a file template
  file            Generate a cookbook file
  helpers         Generate a cookbook helper file in libraries
  resource        Generate a custom resource
  repo            Generate a Chef Infra code repository
  policyfile      Generate a Policyfile for use with the install/push commands
  generator       Copy ChefDK's generator cookbook so you can customize it
  build-cookbook  Generate a build cookbook for use with Chef Workflow (Delivery)
        --chef-license ACCEPTANCE    Accept the license for this product and any contained products ('accept', 'accept-no-persist', or 'accept-silent')
    -h, --help                       Show this message
    -v, --version                    Show ChefDK version

root@ip-172-31-6-143:/home/ubuntu/chef-repo# chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook content
- Committing cookbook files to git

Your cookbook is ready. Type `cd cookbooks/bcf_nginx` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list of local testing commands.

Why not start by writing an InSpec test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb

root@ip-172-31-6-143:/home/ubuntu/chef-repo# sudo apt install tree
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  tree
0 upgraded, 1 newly installed, 0 to remove and 40 not upgraded.
Need to get 40.7 kB of archives.
After this operation, 105 kB of additional disk space will be used.
Get:1 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu bionic/universe amd64 tree amd64 1.7.0-5 [40.7 kB]
Fetched 40.7 kB in 0s (103 kB/s)
Selecting previously unselected package tree.
(Reading database ... 274380 files and directories currently installed.)
Preparing to unpack .../tree_1.7.0-5_amd64.deb ...
Unpacking tree (1.7.0-5) ...
Setting up tree (1.7.0-5) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
root@ip-172-31-6-143:/home/ubuntu/chef-repo# tree cookbooks/bcf_nginx/
cookbooks/bcf_nginx/
+-- CHANGELOG.md
+-- LICENSE
+-- Policyfile.rb
+-- README.md
+-- chefignore
+-- kitchen.yml
+-- metadata.rb
+-- recipes
¦   +-- default.rb
+-- spec
¦   +-- spec_helper.rb
¦   +-- unit
¦       +-- recipes
¦           +-- default_spec.rb
+-- test
    +-- integration
        +-- default
            +-- default_test.rb

7 directories, 11 files
root@ip-172-31-6-143:/home/ubuntu/chef-repo#
