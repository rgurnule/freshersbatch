Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas. They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components. Examine the two deployments, and create two services that meet the following criteria:

auth-svc
The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.
data-svc
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.
Note: All work should be done in the default namespace.

=======================================================================================================================================================================================================

For auth-svc  service:-

step1:- create auth-deployment.yml file as a deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    app: auth-deployment-app
spec:
  replicas: 5
  selector:
   matchLabels:
     app : auth-deployment-app
  template:
    metadata:
      labels: 
        app: auth-deployment-app
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - name: http-port
          containerPort: 80

master $ kubectl get nodes
NAME     STATUS   ROLES    AGE    VERSION
master   Ready    master   160m   v1.14.0
node01   Ready    <none>   159m   v1.14.0

master $ vi auth-deployment.yml
master $ kubectl apply -f auth-deployment.yml
deployment.apps/auth-deployment created

master $ kubectl get deployments
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
auth-deployment   0/5     5            0           9s
master $ kubectl get deployments
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
auth-deployment   2/5     5            2           17s
master $ kubectl get deployments
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
auth-deployment   5/5     5            5           24s

master $ kubectl get pods -o wide
NAME                               READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE   READINESS GATES
auth-deployment-5b5d79499f-86f5f   1/1     Running   0          81s   10.40.0.1   node01   <none>           <none>
auth-deployment-5b5d79499f-ct5vf   1/1     Running   0          81s   10.40.0.2   node01   <none>           <none>
auth-deployment-5b5d79499f-dnjsc   1/1     Running   0          81s   10.40.0.3   node01   <none>           <none>
auth-deployment-5b5d79499f-fzmv6   1/1     Running   0          81s   10.40.0.5   node01   <none>           <none>
auth-deployment-5b5d79499f-pj7j5   1/1     Running   0          81s   10.40.0.4   node01   <none>           <none>
master $ kubectl get deployments -o wide
NAME              READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES   SELECTOR
auth-deployment   5/5     5            5           86s   nginx        nginx    app=auth-deployment-app



Step2:-  Create auth-svc.yml file as service 

apiVersion: v1
kind: Service
metadata:
  name: auth-svc
  labels:
    app: auth-deployment-app
spec:
  selector:
    app: auth-deployment-app
  type: NodePort
  ports:
    - port: 8080
      targetPort: 80
      nodePort: 30001
  
master $ vi auth-svc.yml
master $ kubectl apply -f auth-svc.yml
service/auth-svc created


master $ kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE   SELECTOR
auth-svc     NodePort    10.110.244.143   <none>        8080:30001/TCP   9s    app=auth-deployment-app
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          63m   <none>
master $


master $ kubectl describe service auth-svc
Name:                     auth-svc
Namespace:                default
Labels:                   app=auth-deployment-app
Annotations:              kubectl.kubernetes.io/last-applied-configuration:
                            {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"auth-deployment-app"},"name":"auth-svc","namespace":"def...
Selector:                 app=auth-deployment-app
Type:                     NodePort
IP:                       10.110.244.143
Port:                     <unset>  8080/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  30001/TCP
Endpoints:                10.40.0.1:80,10.40.0.2:80,10.40.0.3:80 + 2 more...
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
master $


Step3:- Checking service is up and running

master $ curl 10.110.244.143:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

master $ curl 10.110.244.143:30001
curl: (7) Failed to connect to 10.110.244.143 port 30001: Connection timed out

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

For data-svc  service:-

step1:- create data--deployment.yml file as a deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-deployment
  labels:
    app: data-deployment-app
spec:
  replicas: 5
  selector:
   matchLabels:
     app : data-deployment-app
  template:
    metadata:
      labels: 
        app: data-deployment-app
    spec:
      containers:
      - name: nginx-data
        image: nginx
        ports:
        - name: http-port
          containerPort: 80


master $ vi data--deployment.yml
master $ kubectl apply -f data--deployment.yml
deployment.apps/data-deployment created

master $ kubectl get deployments -o wide
NAME              READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES   SELECTOR
auth-deployment   5/5     5            5           6m58s   nginx        nginx    app=auth-deployment-app
data-deployment   5/5     5            5           53s     nginx-data   nginx    app=data-deployment-app

master $ kubectl get pods -o wide
NAME                               READY   STATUS    RESTARTS   AGE     IP           NODE     NOMINATED NODE   READINESS GATES
auth-deployment-5b5d79499f-86f5f   1/1     Running   0          7m14s   10.40.0.1    node01   <none>           <none>
auth-deployment-5b5d79499f-ct5vf   1/1     Running   0          7m14s   10.40.0.2    node01   <none>           <none>
auth-deployment-5b5d79499f-dnjsc   1/1     Running   0          7m14s   10.40.0.3    node01   <none>           <none>
auth-deployment-5b5d79499f-fzmv6   1/1     Running   0          7m14s   10.40.0.5    node01   <none>           <none>
auth-deployment-5b5d79499f-pj7j5   1/1     Running   0          7m14s   10.40.0.4    node01   <none>           <none>
data-deployment-57c59ff7c6-4q9f9   1/1     Running   0          70s     10.40.0.10   node01   <none>           <none>
data-deployment-57c59ff7c6-6j6k2   1/1     Running   0          70s     10.40.0.9    node01   <none>           <none>
data-deployment-57c59ff7c6-7qpbz   1/1     Running   0          70s     10.40.0.7    node01   <none>           <none>
data-deployment-57c59ff7c6-hpn4w   1/1     Running   0          70s     10.40.0.8    node01   <none>           <none>
data-deployment-57c59ff7c6-z94jr   1/1     Running   0          70s     10.40.0.6    node01   <none>           <none>
master $

Step2:-  Create data-svc.yml file as service 


apiVersion: v1
kind: Service
metadata:
  name: data-svc
  labels:
    app: data-deployment-app
spec:
  selector:
    app: data-deployment-app
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80


master $ kubectl get pods -o wide
NAME                               READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE   READINESS GATES
data-deployment-57c59ff7c6-ctslb   1/1     Running   0          37s   10.40.0.1   node01   <none>           <none>
data-deployment-57c59ff7c6-gq4bx   1/1     Running   0          37s   10.40.0.4   node01   <none>           <none>
data-deployment-57c59ff7c6-q6f8j   1/1     Running   0          37s   10.40.0.3   node01   <none>           <none>
data-deployment-57c59ff7c6-svb6b   1/1     Running   0          37s   10.40.0.5   node01   <none>           <none>
data-deployment-57c59ff7c6-zp2nd   1/1     Running   0          37s   10.40.0.2   node01   <none>           <none>
master $
master $ vi data-svc.yml
master $ kubectl apply -f data-svc.yml
service/data-svc created

master $ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.110.244.143   <none>        8080:30001/TCP   7m46s
data-svc     ClusterIP   10.100.151.175   <none>        8080/TCP         86s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          71m
master $ kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE     SELECTOR
auth-svc     NodePort    10.110.244.143   <none>        8080:30001/TCP   7m57s   app=auth-deployment-app
data-svc     ClusterIP   10.100.151.175   <none>        8080/TCP         97s     app=data-deployment-app
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          71m     <none>




Step3:- Checking service is up and running


master $ curl 10.100.151.175:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

master $ curl lolcalhost:8080
curl: (6) Could not resolve host: lolcalhost
master $


master $ kubectl describe svc data-svc
Name:              data-svc
Namespace:         default
Labels:            app=data-deployment-app
Annotations:       kubectl.kubernetes.io/last-applied-configuration:
                     {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"data-deployment-app"},"name":"data-svc","namespace":"def...
Selector:          app=data-deployment-app
Type:              ClusterIP
IP:                10.100.151.175
Port:              <unset>  8080/TCP
TargetPort:        80/TCP
Endpoints:         10.40.0.10:80,10.40.0.6:80,10.40.0.7:80 + 2 more...
Session Affinity:  None
Events:            <none>
master $

