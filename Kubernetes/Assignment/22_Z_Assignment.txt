Learning Objectives:-
Create a PersistentVolume
Create a PersistentVolumeClaim
Create a MySQL Pod configured to use the PersistentVolumeClaim

Problem Statement:-
Your company needs a small database server to support a new application. They have asked you to deploy a pod running a MySQL container, but they want the data to persist even if the pod is deleted or replaced. Therefore, the MySQL database pod requires persistent storage.


You will need to do the following:-

1. Create a PersistentVolume:
	The PersistentVolume should be named mysql-pv.
	The volume needs a capacity of 1Gi.
	Use a storageClassName of localdisk.
	Use the accessMode ReadWriteOnce.
	Store the data locally on the node using a hostPath volume at the location /mnt/data.

2. Create a PersistentVolumeClaim:
	The PersistentVolumeClaim should be named mysql-pv-claim.
	Set a resource request on the claim for 500Mi of storage.
	Use the same storageClassName and accessModes as the PersistentVolume so that this claim can bind to the PersistentVolume.

3. Create a MySQL Pod configured to use the PersistentVolumeClaim:
	The Pod should be named mysql-pod.
	Use the image mysql:5.6.
	Expose the containerPort 3306.
	Set an environment variable called MYSQL_ROOT_PASSWORD with the value password.
	Add the PersistentVolumeClaim as a volume and mount it to the container at the path /var/lib/mysql.
=======================================================================================================================================================================================================

Step1:- Create PersistentVolume with given configuration.

File name-  mysql-pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv  
spec:
  storageClassName: localdisk
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"


master $ vi mysql-pv.yml
master $ kubectl apply -f mysql-pv.yml
persistentvolume/mysql-pv created

master $ kubectl get pv
NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
mysql-pv   1Gi        RWO            Retain           Available           localdisk               3s
master $ kubectl get pv mysql-pv
NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
mysql-pv   1Gi        RWO            Retain           Available           localdisk               10s

master $ kubectl describe pv mysql-pv
Name:            mysql-pv
Labels:          <none>
Annotations:     kubectl.kubernetes.io/last-applied-configuration:
                   {"apiVersion":"v1","kind":"PersistentVolume","metadata":{"annotations":{},"name":"mysql-pv"},"spec":{"accessModes":["ReadWriteOnce"],"capa...
Finalizers:      [kubernetes.io/pv-protection]
StorageClass:    localdisk
Status:          Available
Claim:
Reclaim Policy:  Retain
Access Modes:    RWO
VolumeMode:      Filesystem
Capacity:        1Gi
Node Affinity:   <none>
Message:
Source:
    Type:          HostPath (bare host directory volume)
    Path:          /mnt/data
    HostPathType:
Events:            <none>
master $


Step2:- Create a PersistentVolumeClaim with given configuration.

File name:- mysql-pv-claim.yml


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: localdisk
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi


master $ vi mysql-pv-claim.yml
master $ kubectl apply -f mysql-pv-claim.yml
persistentvolumeclaim/mysql-pv-claim created

master $ kubectl get pvc
NAME             STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mysql-pv-claim   Bound    mysql-pv   1Gi        RWO            localdisk      8s
master $ kubectl get pvc mysql-pv-claim
NAME             STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mysql-pv-claim   Bound    mysql-pv   1Gi        RWO            localdisk      15s

master $ kubectl describe pvc mysql-pv-claim
Name:          mysql-pv-claim
Namespace:     default
StorageClass:  localdisk
Status:        Bound
Volume:        mysql-pv
Labels:        <none>
Annotations:   kubectl.kubernetes.io/last-applied-configuration:
                 {"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"annotations":{},"name":"mysql-pv-claim","namespace":"default"},"spec":{"acc...
               pv.kubernetes.io/bind-completed: yes
               pv.kubernetes.io/bound-by-controller: yes
Finalizers:    [kubernetes.io/pvc-protection]
Capacity:      1Gi
Access Modes:  RWO
VolumeMode:    Filesystem
Events:        <none>
Mounted By:    <none>
master $



Step3:- Create a MySQL Pod configured to use the PersistentVolumeClaim with given configuration.

As we need to use password in variables, we need to encypt the "password" and store in secrete file.

master $ echo -n 'password' | base64
cGFzc3dvcmQ=

File name:-  mysql-secret-pass.yml

apiVersion: v1
kind: Secret
metadata:
  name: mysql-password
stringData:
  my-key: cGFzc3dvcmQ=


master $ vi mysql-secret-pass.yml
master $ kubectl apply -f mysql-secret-pass.yml
error: error validating "mysql-secret-pass.yml": error validating data: ValidationError(Secret): unknown field "metadat" in io.k8s.api.core.v1.Secret; if you choose to ignore these errors, turn validation off with --validate=false
master $ vi mysql-secret-pass.yml
master $ kubectl apply -f mysql-secret-pass.yml
secret/mysql-password created

master $ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-6nrlw   kubernetes.io/service-account-token   3      92m
mysql-password        Opaque                                1      9s
master $ kubectl get secrets -o wide
NAME                  TYPE                                  DATA   AGE
default-token-6nrlw   kubernetes.io/service-account-token   3      92m
mysql-password        Opaque                                1      17s

master $ kubectl describe secrets mysql-password
Name:         mysql-password
Namespace:    default
Labels:       <none>
Annotations:
Type:         Opaque

Data
====
my-key:  12 bytes
master $


Lets create a MySQL POD now to execute persistent volum.

File name:- mysql-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: mysql-pod
  labels:
    app: mysql-app
spec:
  containers:
  - name: mysql-pv-pvc-ctr
    image: mysql:5.6
    ports:
    - name: http-port
      containerPort: 3306
      hostPort: 8081
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-password
          key: my-key
    volumeMounts:
    - mountPath: "/var/lib/mysql"
      name: mysql-storage
  volumes:
  - name: mysql-storage
    persistentVolumeClaim:
      claimName: mysql-pv-claim


master $ vi mysql-pod.yml
master $ kubectl apply -f mysql-pod.yml
pod/mysql-pod created

master $ kubectl get pods -o wide
NAME        READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE   READINESS GATES
mysql-pod   1/1     Running   0          12s   10.40.0.1   node01   <none>           <none>



master $ kubectl describe pod mysql-pod
Name:               mysql-pod
Namespace:          default
Priority:           0
PriorityClassName:  <none>
Node:               node01/172.17.0.78
Start Time:         Fri, 29 Nov 2019 07:52:17 +0000
Labels:             app=mysql-app
Annotations:        kubectl.kubernetes.io/last-applied-configuration:
                      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"mysql-app"},"name":"mysql-pod","namespace":"default"},"spec"...
Status:             Running
IP:                 10.40.0.1
Containers:
  mysql-pv-pvc-ctr:
    Container ID:   docker://722dcc9060c91bec27487f21fbaeb929cf0e09650515aaf972c3ec4ad98ba629
    Image:          mysql:5.6
    Image ID:       docker-pullable://mysql@sha256:e4a70c0f52bfda9ed28d2127b461ff44cbc381450e7ca22e83936560d8875f14
    Port:           3306/TCP
    Host Port:      8081/TCP
    State:          Running
      Started:      Fri, 29 Nov 2019 07:52:26 +0000
    Ready:          True
    Restart Count:  0
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'my-key' in secret 'mysql-password'>  Optional: false
    Mounts:
      /var/lib/mysql from mysql-storage (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-6nrlw (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  mysql-storage:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  mysql-pv-claim
    ReadOnly:   false
  default-token-6nrlw:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-6nrlw
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  43s   default-scheduler  Successfully assigned default/mysql-pod to node01
  Normal  Pulled     34s   kubelet, node01    Container image "mysql:5.6" already present on machine
  Normal  Created    34s   kubelet, node01    Created container mysql-pv-pvc-ctr
  Normal  Started    32s   kubelet, node01    Started container mysql-pv-pvc-ctr
master $