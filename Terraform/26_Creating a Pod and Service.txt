Creating a Pod and Service
In this lesson, we will create a pod and service using Terraform.

Setup your environment:

mkdir -p ~/terraform/service
cd ~/terraform/service
Create main.tf:

vi main.tf
main.tf contents:

resource "kubernetes_service" "ghost_service" {
  metadata {
    name = "ghost-service"
  }
  spec {
    selector = {
      app = "${kubernetes_pod.ghost_alpine.metadata.0.labels.app}"
    }
    port {
      port = "2368"
      target_port = "2368"
      node_port = "8081"
    }
    type = "NodePort"
  }
}

resource "kubernetes_pod" "ghost_alpine" {
  metadata {
    name = "ghost-alpine"
    labels = {
      app = "ghost-blog"
    }
  }

  spec {
    container {
      image = "ghost:alpine"
      name  = "ghost-alpine"
      port  {
        container_port = "2368"
      }
    }
  }
}
Initialize Terraform:  terraform init
Validate the files:  terraform validate
Plan the deployment: terraform plan
Deploy the pod:  terraform apply -auto-approve
List the Pods: kubectl get pods
List the Services: kubectl get services
Reset the environment: terraform destroy -auto-approve

=========================================================================================================================================================================================================


[node1 ~]$ mkdir -p ~/terraform/service
[node1 ~]$ cd ~/terraform/service
[node1 service]$ vi main.tf
[node1 service]$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "kubernetes" (hashicorp/kubernetes) 1.10.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.kubernetes: version = "~> 1.10"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[node1 service]$ terraform validate

Error: Unsupported block type

  on main.tf line 6, in resource "kubernetes_service" "ghost_service":
   6:     selector {

Blocks of type "selector" are not expected here. Did you mean to define
argument "selector"? If so, use the equals sign to assign it a value.


Error: Unsupported block type

  on main.tf line 21, in resource "kubernetes_pod" "ghost_alpine":
  21:     labels {

Blocks of type "labels" are not expected here. Did you mean to define argument
"labels"? If so, use the equals sign to assign it a value.

[node1 service]$ vi main.tf
[node1 service]$ terraform validate
Success! The configuration is valid.

[node1 service]$ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_pod.ghost_alpine will be created
  + resource "kubernetes_pod" "ghost_alpine" {
      + id = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app" = "ghost-blog"
            }
          + name             = "ghost-alpine"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + automount_service_account_token  = false
          + dns_policy                       = "ClusterFirst"
          + host_ipc                         = false
          + host_network                     = false
          + host_pid                         = false
          + hostname                         = (known after apply)
          + node_name                        = (known after apply)
          + restart_policy                   = "Always"
          + service_account_name             = (known after apply)
          + share_process_namespace          = false
          + termination_grace_period_seconds = 30

          + container {
              + image                    = "ghost:alpine"
              + image_pull_policy        = (known after apply)
              + name                     = "ghost-alpine"
              + stdin                    = false
              + stdin_once               = false
              + termination_message_path = "/dev/termination-log"
              + tty                      = false

              + port {
                  + container_port = 2368
                  + protocol       = "TCP"
                }

              + resources {
                  + limits {
                      + cpu    = (known after apply)
                      + memory = (known after apply)
                    }

                  + requests {
                      + cpu    = (known after apply)
                      + memory = (known after apply)
                    }
                }

              + volume_mount {
                  + mount_path        = (known after apply)
                  + mount_propagation = (known after apply)
                  + name              = (known after apply)
                  + read_only         = (known after apply)
                  + sub_path          = (known after apply)
                }
            }

          + image_pull_secrets {
              + name = (known after apply)
            }

          + volume {
              + name = (known after apply)

              + aws_elastic_block_store {
                  + fs_type   = (known after apply)
                  + partition = (known after apply)
                  + read_only = (known after apply)
                  + volume_id = (known after apply)
                }

              + azure_disk {
                  + caching_mode  = (known after apply)
                  + data_disk_uri = (known after apply)
                  + disk_name     = (known after apply)
                  + fs_type       = (known after apply)
                  + read_only     = (known after apply)
                }

              + azure_file {
                  + read_only   = (known after apply)
                  + secret_name = (known after apply)
                  + share_name  = (known after apply)
                }

              + ceph_fs {
                  + monitors    = (known after apply)
                  + path        = (known after apply)
                  + read_only   = (known after apply)
                  + secret_file = (known after apply)
                  + user        = (known after apply)

                  + secret_ref {
                      + name = (known after apply)
                    }
                }

              + cinder {
                  + fs_type   = (known after apply)
                  + read_only = (known after apply)
                  + volume_id = (known after apply)
                }

              + config_map {
                  + default_mode = (known after apply)
                  + name         = (known after apply)

                  + items {
                      + key  = (known after apply)
                      + mode = (known after apply)
                      + path = (known after apply)
                    }
                }

              + downward_api {
                  + default_mode = (known after apply)

                  + items {
                      + mode = (known after apply)
                      + path = (known after apply)

                      + field_ref {
                          + api_version = (known after apply)
                          + field_path  = (known after apply)
                        }

                      + resource_field_ref {
                          + container_name = (known after apply)
                          + quantity       = (known after apply)
                          + resource       = (known after apply)
                        }
                    }
                }

              + empty_dir {
                  + medium = (known after apply)
                }

              + fc {
                  + fs_type      = (known after apply)
                  + lun          = (known after apply)
                  + read_only    = (known after apply)
                  + target_ww_ns = (known after apply)
                }

              + flex_volume {
                  + driver    = (known after apply)
                  + fs_type   = (known after apply)
                  + options   = (known after apply)
                  + read_only = (known after apply)

                  + secret_ref {
                      + name = (known after apply)
                    }
                }

              + flocker {
                  + dataset_name = (known after apply)
                  + dataset_uuid = (known after apply)
                }

              + gce_persistent_disk {
                  + fs_type   = (known after apply)
                  + partition = (known after apply)
                  + pd_name   = (known after apply)
                  + read_only = (known after apply)
                }

              + git_repo {
                  + directory  = (known after apply)
                  + repository = (known after apply)
                  + revision   = (known after apply)
                }

              + glusterfs {
                  + endpoints_name = (known after apply)
                  + path           = (known after apply)
                  + read_only      = (known after apply)
                }

              + host_path {
                  + path = (known after apply)
                  + type = (known after apply)
                }

              + iscsi {
                  + fs_type         = (known after apply)
                  + iqn             = (known after apply)
                  + iscsi_interface = (known after apply)
                  + lun             = (known after apply)
                  + read_only       = (known after apply)
                  + target_portal   = (known after apply)
                }

              + local {
                  + path = (known after apply)
                }

              + nfs {
                  + path      = (known after apply)
                  + read_only = (known after apply)
                  + server    = (known after apply)
                }

              + persistent_volume_claim {
                  + claim_name = (known after apply)
                  + read_only  = (known after apply)
                }

              + photon_persistent_disk {
                  + fs_type = (known after apply)
                  + pd_id   = (known after apply)
                }

              + quobyte {
                  + group     = (known after apply)
                  + read_only = (known after apply)
                  + registry  = (known after apply)
                  + user      = (known after apply)
                  + volume    = (known after apply)
                }

              + rbd {
                  + ceph_monitors = (known after apply)
                  + fs_type       = (known after apply)
                  + keyring       = (known after apply)
                  + rados_user    = (known after apply)
                  + rbd_image     = (known after apply)
                  + rbd_pool      = (known after apply)
                  + read_only     = (known after apply)

                  + secret_ref {
                      + name = (known after apply)
                    }
                }

              + secret {
                  + default_mode = (known after apply)
                  + optional     = (known after apply)
                  + secret_name  = (known after apply)

                  + items {
                      + key  = (known after apply)
                      + mode = (known after apply)
                      + path = (known after apply)
                    }
                }

              + vsphere_volume {
                  + fs_type     = (known after apply)
                  + volume_path = (known after apply)
                }
            }
        }
    }

  # kubernetes_service.ghost_service will be created
  + resource "kubernetes_service" "ghost_service" {
      + id                    = (known after apply)
      + load_balancer_ingress = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "ghost-service"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "ghost-blog"
            }
          + session_affinity            = "None"
          + type                        = "NodePort"

          + port {
              + node_port   = 8081
              + port        = 2368
              + protocol    = "TCP"
              + target_port = "2368"
            }
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[node1 service]$ terraform apply -auto-approve
kubernetes_pod.ghost_alpine: Creating...
kubernetes_pod.ghost_alpine: Still creating... [10s elapsed]
kubernetes_pod.ghost_alpine: Still creating... [20s elapsed]
kubernetes_pod.ghost_alpine: Creation complete after 23s [id=default/ghost-alpine]
kubernetes_service.ghost_service: Creating...

Error: Service "ghost-service" is invalid: spec.ports[0].nodePort: Invalid value: 8081: provided port is not in the valid range. The range of valid ports is 30000-32767

  on main.tf line 1, in resource "kubernetes_service" "ghost_service":
   1: resource "kubernetes_service" "ghost_service" {


[node1 service]$ vi main.tf
[node1 service]$ terraform validate
Success! The configuration is valid.

[node1 service]$ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

kubernetes_pod.ghost_alpine: Refreshing state... [id=default/ghost-alpine]

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_service.ghost_service will be created
  + resource "kubernetes_service" "ghost_service" {
      + id                    = (known after apply)
      + load_balancer_ingress = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "ghost-service"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + cluster_ip                  = (known after apply)
          + external_traffic_policy     = (known after apply)
          + publish_not_ready_addresses = false
          + selector                    = {
              + "app" = "ghost-blog"
            }
          + session_affinity            = "None"
          + type                        = "NodePort"

          + port {
              + node_port   = 30081
              + port        = 2368
              + protocol    = "TCP"
              + target_port = "2368"
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[node1 service]$ terraform apply -auto-approve
kubernetes_pod.ghost_alpine: Refreshing state... [id=default/ghost-alpine]
kubernetes_service.ghost_service: Creating...
kubernetes_service.ghost_service: Creation complete after 0s [id=default/ghost-service]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
[node1 service]$ kubectl get pods
NAME           READY   STATUS    RESTARTS   AGE
ghost-alpine   1/1     Running   0          2m18s
[node1 service]$ kubectl get services
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
ghost-service   NodePort    10.108.217.77   <none>        2368:30081/TCP   26s
kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP          42m
[node1 service]$ kubectl describe node ghost-alpine
Error from server (NotFound): nodes "ghost-alpine" not found
[node1 service]$ kubectl describe pod ghost-alpine
Name:               ghost-alpine
Namespace:          default
Priority:           0
PriorityClassName:  <none>
Node:               node2/192.168.0.28
Start Time:         Thu, 12 Dec 2019 07:46:20 +0000
Labels:             app=ghost-blog
Annotations:        <none>
Status:             Running
IP:                 10.32.0.4
Containers:
  ghost-alpine:
    Container ID:   docker://707bc8c0b56aa287259d73a2d5bbd57cd72212ad0d95e3021af8e1a10008578c
    Image:          ghost:alpine
    Image ID:       docker-pullable://ghost@sha256:92ccd65240f66ad5835e554186b294006fee7dac9eceea0cbe13f7182eacfcb2
    Port:           2368/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 12 Dec 2019 07:46:40 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:         <none>
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:            <none>
QoS Class:          BestEffort
Node-Selectors:     <none>
Tolerations:        node.kubernetes.io/not-ready:NoExecute for 300s
                    node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  3m45s  default-scheduler  Successfully assigned default/ghost-alpine to node2
  Normal  Pulled     3m44s  kubelet, node2     Container image "ghost:alpine" already present on machine
  Normal  Created    3m26s  kubelet, node2     Created container ghost-alpine
  Normal  Started    3m25s  kubelet, node2     Started container ghost-alpine
[node1 service]$ kubectl describe service ghost-service
Name:                     ghost-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=ghost-blog
Type:                     NodePort
IP:                       10.108.217.77
Port:                     <unset>  2368/TCP
TargetPort:               2368/TCP
NodePort:                 <unset>  30081/TCP
Endpoints:                10.32.0.4:2368
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
[node1 service]$ terraform destroy -auto-approve
kubernetes_pod.ghost_alpine: Refreshing state... [id=default/ghost-alpine]
kubernetes_service.ghost_service: Refreshing state... [id=default/ghost-service]
kubernetes_service.ghost_service: Destroying... [id=default/ghost-service]
kubernetes_service.ghost_service: Destruction complete after 1s
kubernetes_pod.ghost_alpine: Destroying... [id=default/ghost-alpine]
kubernetes_pod.ghost_alpine: Still destroying... [id=default/ghost-alpine, 10s elapsed]
kubernetes_pod.ghost_alpine: Destruction complete after 16s

Destroy complete! Resources: 2 destroyed.
[node1 service]$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   44m
[node1 service]$ kubectl get pods
No resources found.
[node1 service]$
cat service/main.tf

resource "kubernetes_service" "ghost_service" {
  metadata {
    name = "ghost-service"
  }
  spec {
    selector = {
      app = kubernetes_pod.ghost_alpine.metadata.0.labels.app
    }
    port {
      port = "2368"
      target_port = "2368"
      node_port = "30081"
    }
    type = "NodePort"
  }
}

resource "kubernetes_pod" "ghost_alpine" {
  metadata {
    name = "ghost-alpine"
    labels = {
      app = "ghost-blog"
    }
  }

  spec {
    container {
      image = "ghost:alpine"
      name  = "ghost-alpine"
      port  {
        container_port = "2368"
      }
    }
  }
}