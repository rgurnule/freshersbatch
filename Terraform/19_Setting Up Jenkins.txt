In this lesson, we will take the Jenkins image we built in the previous lesson, and deploy a Docker container using Terraform.

Edit main.tf:

vi main.tf
main.tf contents:

# Jenkins Volume
resource "docker_volume" "jenkins_volume" {
  name = "jenkins_data"
}

# Start the Jenkins Container
resource "docker_container" "jenkins_container" {
  name  = "jenkins"
  image = "jenkins:terraform"
  ports {
    internal = "8080"
    external = "8080"
  }

  volumes {
    volume_name    = "${docker_volume.jenkins_volume.name}"
    container_path = "/var/jenkins_home"
  }

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }
}
Initialize Terraform:

terraform init
Plan the deployment:

terraform plan -out=tfplan
Deploy Jenkins:

terraform apply tfplan
Get the Admin password:

docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword

=================================================================================================================================================================================================



ubuntu@ip-172-31-39-236:~/jenkins$ vi main.tf

ubuntu@ip-172-31-39-236:~/jenkins$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "docker" (terraform-providers/docker) 2.6.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.6"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ip-172-31-39-236:~/jenkins$ terraform validate
Success! The configuration is valid.

ubuntu@ip-172-31-39-236:~/jenkins$ terraform plan -out=tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.jenkins_container will be created
  + resource "docker_container" "jenkins_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = "jenkins:terraform"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "jenkins"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 8080
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }

      + volumes {
          + container_path = "/var/jenkins_home"
          + volume_name    = "jenkins_data"
        }
      + volumes {
          + container_path = "/var/run/docker.sock"
          + host_path      = "/var/run/docker.sock"
        }
    }

  # docker_volume.jenkins_volume will be created
  + resource "docker_volume" "jenkins_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "jenkins_data"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

ubuntu@ip-172-31-39-236:~/jenkins$ terraform apply "tfplan"
docker_volume.jenkins_volume: Creating...
docker_volume.jenkins_volume: Creation complete after 0s [id=jenkins_data]
docker_container.jenkins_container: Creating...
docker_container.jenkins_container: Creation complete after 1s [id=19d5e6528f84740477f057ef6e3fa0b97e1b18062d3a89ac290a39fb465e0337]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate
ubuntu@ip-172-31-39-236:~/jenkins$ docker container ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
19d5e6528f84        jenkins:terraform   "/sbin/tini -- /usr/…"   26 seconds ago      Up 25 seconds       0.0.0.0:8080->8080/tcp, 50000/tcp   jenkins
ubuntu@ip-172-31-39-236:~/jenkins$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
jenkins             terraform           0812bc94728f        6 minutes ago       1.38GB
jenkins/jenkins     lts                 22b8b9a84dbe        2 weeks ago         568MB
ubuntu@ip-172-31-39-236:~/jenkins$

ubuntu@ip-172-31-39-236:~/jenkins$ docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
26102e7c7b3e47cb9321c0ffdfdcf570
ubuntu@ip-172-31-39-236:~/jenkins$


ubuntu@ip-172-31-39-236:~/jenkins$ ls -ltr
total 16124
-rw-rw-r-- 1 ubuntu ubuntu      668 Dec 10 11:59 Dockerfile
-rw-rw-r-- 1 ubuntu ubuntu      496 Dec 10 12:05 main.tf
-rw-rw-r-- 1 ubuntu ubuntu 16494567 Dec 10 12:08 terraform_0.12.17_linux_amd64.zip
-rw-rw-r-- 1 ubuntu ubuntu     1743 Dec 10 12:09 tfplan
-rw-rw-r-- 1 ubuntu ubuntu     3877 Dec 10 12:09 terraform.tfstate
ubuntu@ip-172-31-39-236:~/jenkins$ cat main.tf
# Jenkins Volume
resource "docker_volume" "jenkins_volume" {
  name = "jenkins_data"
}

# Start the Jenkins Container
resource "docker_container" "jenkins_container" {
  name  = "jenkins"
  image = "jenkins:terraform"
  ports {
    internal = "8080"
    external = "8080"
  }

  volumes {
    volume_name    = docker_volume.jenkins_volume.name
    container_path = "/var/jenkins_home"
  }

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }
}
ubuntu@ip-172-31-39-236:~/jenkins$


After hitting http://13.233.94.129:8080/login?from=%2F getting jenkins Getting started page.
