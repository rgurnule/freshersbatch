Here, we will start working with Jenkins by creating a simple build job. This job will deploy a Docker container using Terraform, list the container, and then destroy it.

In the Jenkins dashboard, Click New Item.
Select Freestyle Project, and enter an item name of DeployGhost. Click Ok.

Under Source Code Management, select Git. Enter a Repository URL of https://github.com/satyensingh/terraform-docker.git

In the Build section, click Add build step and select Execute shell from the dropdown.

Add the following in the Command area:

terraform init
terraform plan -out=tfplan
terraform apply tfplan
docker container ls
terraform destroy -auto-approve
Click Save.

Now, if we click Build Now in the left-hand menu, our project will start building. Clicking the little dropdown arrow next to #1 will give us a menu. Select Console Output to watch things build. Once we get a Finished: SUCCESS message, we're done.

=================================================================================================================================================================================================


Jenkins setup was done and then ran the build, got below console logs:-

Started by user admin
Running as SYSTEM
Building in workspace /var/jenkins_home/workspace/DeployGhost
No credentials specified
 > git rev-parse --is-inside-work-tree # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/rgurnule/terraform-docker.git # timeout=10
Fetching upstream changes from https://github.com/rgurnule/terraform-docker.git
 > git --version # timeout=10
 > git fetch --tags --progress -- https://github.com/rgurnule/terraform-docker.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10
Checking out Revision fc32a2877484a8d6691dc3c068b03c296522e08a (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f fc32a2877484a8d6691dc3c068b03c296522e08a # timeout=10
Commit message: "Update main.tf"
First time build. Skipping changelog.
[DeployGhost] $ /bin/sh -xe /tmp/jenkins6153612637598748257.sh
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.6"

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
+ terraform plan -out=tfplan
[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # docker_container.container_id[0m will be created[0m[0m
[0m[32m  +[0m [0mresource "docker_container" "container_id" {
      [32m+[0m [0m[1m[0mattach[0m[0m           = false
      [32m+[0m [0m[1m[0mbridge[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mcontainer_logs[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mexit_code[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mgateway[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mimage[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mip_address[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mip_prefix_length[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mlog_driver[0m[0m       = "json-file"
      [32m+[0m [0m[1m[0mlogs[0m[0m             = false
      [32m+[0m [0m[1m[0mmust_run[0m[0m         = true
      [32m+[0m [0m[1m[0mname[0m[0m             = "ghost_blog"
      [32m+[0m [0m[1m[0mnetwork_data[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mread_only[0m[0m        = false
      [32m+[0m [0m[1m[0mrestart[0m[0m          = "no"
      [32m+[0m [0m[1m[0mrm[0m[0m               = false
      [32m+[0m [0m[1m[0mstart[0m[0m            = true

      [32m+[0m [0mports {
          [32m+[0m [0m[1m[0mexternal[0m[0m = 8090
          [32m+[0m [0m[1m[0minternal[0m[0m = 2368
          [32m+[0m [0m[1m[0mip[0m[0m       = "0.0.0.0"
          [32m+[0m [0m[1m[0mprotocol[0m[0m = "tcp"
        }
    }

[1m  # docker_image.image_id[0m will be created[0m[0m
[0m[32m  +[0m [0mresource "docker_image" "image_id" {
      [32m+[0m [0m[1m[0mid[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mlatest[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m   = "ghost:latest"
    }

[0m[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

+ terraform apply tfplan
[0m[1mdocker_image.image_id: Creating...[0m[0m
[0m[1mdocker_image.image_id: Still creating... [10s elapsed][0m[0m
[0m[1mdocker_image.image_id: Still creating... [20s elapsed][0m[0m
[0m[1mdocker_image.image_id: Creation complete after 28s [id=sha256:eadda45eb5e4c4dde5ef2bbb16f7e6754183d4e6fab6025f44fe1c214a5efc6eghost:latest][0m[0m
[0m[1mdocker_container.container_id: Creating...[0m[0m
[0m[1mdocker_container.container_id: Creation complete after 2s [id=01113cb10317fd9556d948453544cc1401b2352217b9bcba71eab45bfb7a0be9][0m[0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.[0m
[0m
The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate[0m
[0m[1m[32m
Outputs:

container_name = ghost_blog
ip = 172.17.0.3[0m
+ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
01113cb10317        eadda45eb5e4        "docker-entrypoint.s…"   3 seconds ago       Up 1 second         0.0.0.0:8090->2368/tcp              ghost_blog
19d5e6528f84        jenkins:terraform   "/sbin/tini -- /usr/…"   22 minutes ago      Up 22 minutes       0.0.0.0:8080->8080/tcp, 50000/tcp   jenkins
+ terraform destroy -auto-approve
[0m[1mdocker_image.image_id: Refreshing state... [id=sha256:eadda45eb5e4c4dde5ef2bbb16f7e6754183d4e6fab6025f44fe1c214a5efc6eghost:latest][0m
[0m[1mdocker_container.container_id: Refreshing state... [id=01113cb10317fd9556d948453544cc1401b2352217b9bcba71eab45bfb7a0be9][0m
[0m[1mdocker_container.container_id: Destroying... [id=01113cb10317fd9556d948453544cc1401b2352217b9bcba71eab45bfb7a0be9][0m[0m
[0m[1mdocker_container.container_id: Destruction complete after 2s[0m[0m
[0m[1mdocker_image.image_id: Destroying... [id=sha256:eadda45eb5e4c4dde5ef2bbb16f7e6754183d4e6fab6025f44fe1c214a5efc6eghost:latest][0m[0m
[0m[1mdocker_image.image_id: Destruction complete after 3s[0m[0m
[0m[1m[32m
Destroy complete! Resources: 2 destroyed.[0m
Finished: SUCCESS
